name: Deployment Agent CI/CD

on:
  push:
    branches:
      - main
      - dev

  workflow_dispatch:

env:
  # Docker Repository for pushing images during build
  REPO_URL: registry.example.com

  # Docker Repository for pulling images for deployment
  PULL_REGISTRY: registry.example.com

  # Image Name
  IMAGE_NAME: deployment-agent

  # Container Name for your service
  CONTAINER_NAME: "deployment-agent"

  # Remote Path where your code / compose files are located
  PROJECT_PATH: "/opt/deployment-agent"

  # A config mapping branches to remote nodes
  CONFIG: >-
    {
      "dev": {
        "nodes": {
          "DEV": ["dev-server.example.com"]
        }
      },
      "main": {
        "nodes": {
          "PROD": ["prod-server.example.com"]
        }
      }
    }

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Install Dependencies
        run: |
          echo "Installing required packages..."
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Ensure config is valid JSON
        run: |
          echo '${{ env.CONFIG }}' > config.json
          jq empty config.json

      - name: Verify branch exists in config
        run: |
          BRANCH="${{ github.ref_name }}"
          if ! jq -e --arg branch "$BRANCH" '.[$branch]' config.json > /dev/null; then
            echo "Error: No configuration for branch '$BRANCH'"
            exit 1
          fi

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REPO_URL }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.REPO_URL }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Servers
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Install Dependencies
        run: |
          echo "Installing required packages..."
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Checkout
        uses: actions/checkout@v3

      - name: Extract Branch
        id: branch-info
        run: echo "branch=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT

      - name: Prepare for Deployment
        id: prepare-deploy
        run: |
          echo '${{ env.CONFIG }}' > config.json
          BRANCH="${{ steps.branch-info.outputs.branch }}"
          REGIONS=$(jq -r --arg branch "$BRANCH" '.[$branch].nodes | keys | join(" ")' config.json)
          echo "regions=$REGIONS" >> $GITHUB_OUTPUT

      - name: Get Commit Info
        id: commit-info
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "author=$(git log -1 --pretty=format:'%an')" >> $GITHUB_OUTPUT
          echo "message=$(git log -1 --pretty=format:'%s')" >> $GITHUB_OUTPUT

      - name: Deploy to Each Region
        id: deploy
        run: |
          IMAGE_TAG="${{ env.PULL_REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "Deploying using Docker image tag: $IMAGE_TAG"
          REGIONS="${{ steps.prepare-deploy.outputs.regions }}"
          BRANCH="${{ steps.branch-info.outputs.branch }}"
          
          failed_nodes=""
          
          for region in $REGIONS; do
            echo "Deploying to region: $region"
            nodes=$(jq -r --arg branch "$BRANCH" --arg region "$region" '.[$branch].nodes[$region][]' config.json)
            for node in $nodes; do
              echo "  Node: $node"
              if ssh -o StrictHostKeyChecking=no user@${node} "
                cd ${{ env.PROJECT_PATH }}
                docker pull $IMAGE_TAG
                docker-compose down
                docker-compose up -d
              "; then
                echo "  -> Deployed to $node!"
              else
                failed_nodes="$failed_nodes$node "
              fi
            done
          done
          
          echo "failed_nodes=${failed_nodes}" >> $GITHUB_OUTPUT

      - name: Send Deployment Notification
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: >
            {
              "text": "${{ job.status == 'success' && '✅ Deployment succeeded!' || '❌ Deployment failed!' }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Deployment Summary*\n*Service*: ${{ env.CONTAINER_NAME }}\n*Status*: ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}\n*Branch*: ${{ steps.branch-info.outputs.branch }}\n*Commit*: ${{ steps.commit-info.outputs.sha_short }}\n*Author*: ${{ steps.commit-info.outputs.author }}\n*Message*: ${{ steps.commit-info.outputs.message }}${{ steps.deploy.outputs.failed_nodes && format('\n*Failed Nodes*: {0}', steps.deploy.outputs.failed_nodes) || '' }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK 